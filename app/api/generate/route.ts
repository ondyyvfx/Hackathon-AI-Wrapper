import { NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

function withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {
  const timeout = new Promise<never>((_, reject) =>
    setTimeout(() => reject(new Error('Timeout')), ms)
  );
  return Promise.race([promise, timeout]);
}

export async function POST(req: Request) {
  try {
    const { prompt } = await req.json();

    if (!prompt) {
      return NextResponse.json({ error: '–ü–æ–ª–µ prompt –Ω–µ —É–∫–∞–∑–∞–Ω–æ' }, { status: 400 });
    }

    // üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (–≥–µ—Ä–æ–π/–∑–ª–æ–¥–µ–π)
    const completion = await withTimeout(
      openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.7,
        max_tokens: 300, // ‚è±Ô∏è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
      }),
      60000
    );

    const text = completion.choices[0].message.content?.trim() || '';
    if (!text) {
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥–µ—Ä–æ—è/–∑–ª–æ–¥–µ—è' }, { status: 500 });
    }

    // üîπ –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ prompt –¥–ª—è DALL¬∑E
    const translate = await withTimeout(
      openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: `You are a translator that turns Russian superhero or villain descriptions into short English prompts for cartoon image generation.`,
          },
          {
            role: 'user',
            content: `Translate this into a vivid English prompt for a cartoon image:\n\n${text}`,
          },
        ],
        temperature: 0.3,
        max_tokens: 150,
      }),
      60000
    );

    const translatedPrompt = translate.choices[0].message.content?.trim();
    if (!translatedPrompt) {
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏' }, { status: 500 });
    }

    // üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä!)
    const image = await withTimeout(
      openai.images.generate({
        prompt: `${translatedPrompt}, cartoon style, comic book illustration, vibrant colors, full body, dynamic pose, white background`,
        n: 1,
        size: '512x512', // üî• –±—ã—Å—Ç—Ä–µ–µ!
      }),
      60000
    );

    const imageUrl = image.data[0]?.url;
    if (!imageUrl) {
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' }, { status: 500 });
    }

    return NextResponse.json({ text, imageUrl });

  } catch (err: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', err.message || err);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' }, { status: 500 });
  }
}
