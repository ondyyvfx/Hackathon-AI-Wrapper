import { NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

export async function POST(req: Request) {
  try {
    const { prompt } = await req.json();

    if (!prompt) {
      return NextResponse.json({ error: '–ü–æ–ª–µ prompt –Ω–µ —É–∫–∞–∑–∞–Ω–æ' }, { status: 400 });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (–≥–µ—Ä–æ–π –∏–ª–∏ –∑–ª–æ–¥–µ–π)
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'user',
          content: prompt,
        },
      ],
    });

    const text = completion.choices[0].message.content?.trim() || '';
    console.log('ü¶∏ –ì–µ—Ä–æ–π/–ó–ª–æ–¥–µ–π:\n', text);

    if (!text) {
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥–µ—Ä–æ—è/–∑–ª–æ–¥–µ—è' }, { status: 500 });
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const translate = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `You are a translator that turns Russian superhero or villain descriptions into short English prompts for cartoon image generation. Focus on appearance, costume, pose, and vibe. Format it as a vivid cartoon prompt for DALL¬∑E.`,
        },
        {
          role: 'user',
          content: `Translate this into a vivid English prompt for a cartoon image:\n\n${text}`,
        },
      ],
    });

    const translatedPrompt = translate.choices[0].message.content?.trim();
    if (!translatedPrompt) {
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏' }, { status: 500 });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const image = await openai.images.generate({
      prompt: `${translatedPrompt}, cartoon style, comic book illustration, vibrant colors, full body, dynamic pose, white background`,
      n: 1,
      size: '1024x1024',
    });

    const imageUrl = image.data[0]?.url;
    if (!imageUrl) {
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' }, { status: 500 });
    }

    return NextResponse.json({ text, imageUrl });

  } catch (err: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', err.message || err);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' }, { status: 500 });
  }
}
